///////////////////////////////////////////////////////////////////////////////////
                            Info importante
//////////////////////////////////////////////////////////////////////////////////

 Meet: https://meet.google.com/hcx-bsvg-kic

    Presentismo: https://docs.google.com/forms/d/e/1FAIpQLScl4ZbTE1ncTI5DP4qMiUG2P5B8Xi71sFOC2cNSElC9IGqArQ/viewform

    Clases grabadas: https://www.youtube.com/playlist?list=PLLH_HXq0HWKJESyiQo44NMxs4samaJaVV

    Drive: https://drive.google.com/drive/folders/1Hz1y7-K2fz1koZBPbb8L3_Xh1rbHW2mw?usp=drive_link


Aula Virtual: https://aulasvirtuales.bue.edu.ar/

    Se accede con los siguientes datos:

    Usuario: DNI del estudiante

    Contraseña: Prueba!123

    /////////////////////////////////////////////////////////////////////////////////////////////
                                          11/3
    /////////////////////////////////////////////////////////////////////////////////////////////

el enlace 11/4 1.02 Se Inicia el index, se arma la estructura báscica con html semantico
 y se empieza con el desarrollo del menú en el nav.


///////////////////////////////////////////////////////////////////////////////////////////
                                        16/4 
/////////////////////////////////////////////////////////////////////////////////////////
Arranca en el minuto 18.10, se continua desarrollando el nav, se agrada icono a la derecha 
desde google font y se trabaja con boostrap para la alineación de los componentes del menu.
Se agrega un alineación al icono de la izquierda con una clase linkAnimado usando una animación 
de la libreria AnimateCSS.

32.12 Se cambia el fondo, para esto se agregan dos section, banner y buscador. Luego se copia de la
pagina index-sin-vue.html, la seccion banner  y se la pega en el index, del css la clase banner y se 
lo copia en nuestro css (creo las carpetas css y img) y la imagen banner-bg.jpg en la carpeta img.

Usa bootstrap para ubicar el texto, d-flex justify-content-center align-items-center y despues como
el texto que da uno al lado del otro usa flex-column para indicar la direccion del texto, text-white
para poner el texto en blanco

39.50 Explica proble de centrado

42. Importa una fuente desde el googlefont, colocando primero el import al inicio del css, 
despues para usarla en el mismo css usamos la etiqueta
body{
    font-family: "Open Sans", sans-serif;
}
copiando esta referencia de la pagina de googlefont



Salto a 43.38 por falta de tiempo para ver como hacer el registro con el modal, 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ojo para que funcione el modal no se modifica el href se agrega a continuación las propiedades
 data-bs-toggle="modal" data-bs-target="#staticBackdrop" a la etiqueta "a".
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Se modifica la propiedad data-bs-target="#stacticBackrop" (recordar que stacticBackrop es el tipo 
de modal que estamos usando), por data-bs-target="#stacticBackropRegistro", para relacionarlo con 
el tema que estamos usando el link registro de nuestro menú
Además también se debe modicar de la misma forma el id del div que contiernen el modal a 
id="staticBackdropRegistro"

46 Se comienza el modal, se copia desde la pagina de bootstrap el ejemplo de static asi cuando hacemos
click fuera de el no se cierra, se lo copia a continuaciones del header, y se lo activa por medio del
link (46.14) copiando luego del href, el cual no modifica y lo deja vacio las siguientes propiedades
que estaban el en boton de ejemplo que activaban el modal 
    "data-bs-toggle="modal" data-bs-target="#staticBackdropRegistro"

quedando el href asi
        <a href=""data-bs-toggle="modal" data-bs-target="#staticBackdropRegistro">Registrarse</a>

Se lo va adaptanto cambiando el titulo y el boton cerrar.

 1.02.30 En el body del modal hacer el formulario con los campos del registro

1.02.49 Se empieza a trabajar con la seccion del buscador 
1.04.32 Se modifican los input text usando boostrap, usa floting-laber, copia el codigo desde la pagina 
boostrap

1:20:53 Se comienza con la sección los más vistos

////////////////////////////////////////////////////////////////////////////////////////////////
                                            18/4
///////////////////////////////////////////////////////////////////////////////////////////////
Ver si se puede publicar en Netlify


22:40 - Se hace un cambio en el modal

La clase model-content es el que modifica lo visual del modal. Teniendo en cuenta estocambia los colores, 
pero eso ya lo hicimos en el nuestro por lo cual no se modifica

Luego en 26.47 luego fija el header agregando en el css en la etiqueta header la propiedad 
sticky y la de opt 0px. Luego se lo remplaza por una clase de bootst prap que hace lo mismo es stick-md-top

29.10 empieza a analizar la grilla de las tendencias de hoy.
eliculas
34.32 copia un div q repesenta una pelicula de la grilla q eligio la profesora para presentarlas
Actualiza el enlace de las imagenes a la ubicación actual.


//////////////////////////////////////////////////////////////////////////////////////////////////
                                        23/4
/////////////////////////////////////////////////////////////////////////////////////////////////

0.08.00 Se retoma el tp inciacndo como cambia los frentes de las peliculas.

0.20.00 AProximadamente un alumno le indica que NO LE FUNCIONA EL MODAL y le explica que al copiar 
la importacion del bootstrap (22.50) arriba a la derecha hay un menu desplagable que indica la version en la
documentacion, que hay q verificar que version estamos importando y luego cuando copiamos el modal desde
la documentacion que coincida la version pq sino puede que no funcione.
Después baja a la zona de los link cdn y copia de ahi el link de los cdn que se supones q son de los
principales

0.37.04 Se retoma el desarrollo. Indica que pueden entregar el mismo trabajo con mejoras.


//////////////////////////////////////////////////////////////////////////////////////////////////
                                           25/4                                       
//////////////////////////////////////////////////////////////////////////////////////////////////

Arranca 30.25
Se trata el tema de la pate teórica de js, variable, cte, cadena de caracteres.
El uso de alt 96 para colocar la comilla simple invertida que permite incluir en una cadena de texto
el valor de vaiables usando ${variable}

/////////////////////////////////////////////////////////////////////////////////////////////////
                                           30/4                                       
//////////////////////////////////////////////////////////////////////////////////////////////////

En 0.11.00 habla sobre la opcion lighthouse dentro de la opcion inspeccionar del navegador que hacer un
informe del sitio como si las imagenes son pesadas por ejemplo.

0.16.00Indica por ejempo q se puede usar iloveimg para mejorar el tema de tamaño o photoshop.
recomienda tambien usar fromato png o webpic?

0.22.29 paa la dir toolsdw.netlify.app de una profe con un monton de recursos gratis como por ejemplo
imagenes y herramientas y tutoriales.

0.27.18 Habla de la opcion (deb) (DEPURACION o debuger de visual) y explica como usarlo, indicando
como modificar el json de configurarion cuando no levanta la papgina pq p. ej esta apuntando a local
 host (0.32.27).
0.40.00 Se explica los operadores de asignacion y operdores logicos.

0.53.00 explica el operador ternario que puede reemplazar al informe, el if con el if else anidado 
y el switch.

1.20.34 Usa el if para comparar usuario y password

1.21.00 analiza el while

1.26.05 Uso de parseInt() para pasar una cadena a entero


/////////////////////////////////////////////////////////////////////////////////////////////////
                                           2/5                                       
//////////////////////////////////////////////////////////////////////////////////////////////////

0.12.40 Explica el form

0.15.08 Empieza a explicar funciones.Declara la funcion antes de usarla.

0.39.17 funcion con multiples return

0.45.00 funciones con valores predeterminados

Comienza hablando de las funciones que reciben parametros. Ojo verificar si los parametros por mas que
sea numeros los pase como strig y despues si se necesita hacer un cambio se use parse.

1.07.13 Explica como se usan las funciones flecha

***********************************************************************************************************

Las funciones flecha tienen la forma:

let nombre = variable o (variables o variables separados por comas) => operación o {grupo de operaciones}

nombre es la variable que va a contener el resultado de la funcion (es tambien el nombre que se usa para 
llamarla).

Si recibe mas de un parametros esto van entre parentesis (variables), sino solo el nombre del parámetro.

Si se hace una sola operación se pone directamente sino el grupo de operaciones va entre llaves como en una
función común.

Se las llama como a cualquier otra función que devuelve un resultado

resultado = nombre(el o los parametros separados por comas)

Ej.1)

let aPotencia2 = x => x**2
resultado = aPotencia2(4)

Ej.2)

let aOpMat = (a,b,op) => {
    if (op=='sumar') {
        return parseInt(a)+parseInt(b)
    } else if (op=='restar') {
        return parseInt(a)-parseInt(b)
    } else if (op=='multiplicar') {
        return parseInt(a)*parseInt(b)
    } else  {
        return parseInt(a)/parseInt(b)
    }
}

result=aOpMat(4,7,"sumar") 


**********************************************************************************************************
1.08.43 Explica como se hace el debuger o depuración en VS 


1) Se selecciona el archivo js.
2)Se presiona en la barra derecha el boton de debug
3)De las opciones que aparece se elige run & debug
4)Se elige el nevegador a usar, esto crea un archivo json de configuración.
5)Como este archivo de configuración está apuntando al localhost en la url, se elegi la pestaña donde esta 
  el html, por ejemplo el index, se lo levanta, en nuestro caso usamos live server, una vez que se abre la 
  página html en nuestro navegador copianos la url desde la barra, que segura sera la del puerto que usa el 
  live server, por ej. http://127.0.0.1:5500/fortaleza.html, y esta direccion la copiamos en la opción url 
  del archivo json de configuración del debug.
6)Una vez hecho esto, si apretáramos el boton launch chrome en la barra de depuración de arriba, que aparecio 
  cuando nosotros habiamos apretado el boton de depuración no va a pasar nada, tenemos que agregar un 
  breackpoint, lo que se hace al colocar el cursor a la izquierda del numero de linea que queremos que se 
  detenga en la parte del código y hacer click, debe aparecer un punto rojo.
7)Una vez hecho esto lo debemos reiniciar o restartear (restart) presionan el boton restart en la pequena barra 
  flotante quue aparecion con los botones de debug, el boton de restart es como una flecha circular. Esto 
  reinicia el navegador y ejecuta todo hasta el breackpoint que pusimos.
8)Una vez para la ejecución volvemos a presionar re y luego algunos de los botones de la barra flotante de 
  depuración como por ejemplo avanzar un paso, etc.

  1.10.58 OBJETOS. Comienza la explicación 
  1.12.30 Pasa la direccion de una pagina para hacer diagrama de objetos gratiuta (https://app.diagrams.net)
  1.27.21 Una compañera muestra un curso de freecodecamp español
         https://www.freecodecamp.org/espanol/news/programacion-orientada-a-objectos-en-javascript-explicado-con-ejemplos/